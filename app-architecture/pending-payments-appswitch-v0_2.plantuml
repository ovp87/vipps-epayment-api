@startuml Pending Payments
participant Merchant
actor Customer
participant ProductService
participant FeedAPI
participant VippsPunkt
participant App
participant PE

Merchant -> ProductService: Initiate Order with ID abc


Merchant --> App: Redirect to vipps app with order ABC
App -> VippsPunkt: validate token
VippsPunkt -> App: go to service XXX

alt appswitch flow 1

App -> ProductService: PUT order abc with CustomerID 
ProductService -> PE: Create Order
PE -> ProductService: Return token xyz and store
ProductService -> App: Return Order

else appswitch flow 2

App -> ProductService: PUT order abc with CustomerID 
ProductService -> PE: Create Order
PE -> ProductService: Return token xyz and store
ProductService -> FeedAPI: sync api pending order ABC with all data
ProductService -> App: Return OK
App -> FeedAPI: get pending orders
FeedAPI -> App: return order abc

end

App <-> ProductService: Do product things
Customer --> App: Go to payment screen
  App -> PE: GET order/<ordertoken>
  App <-- PE: Info for SCA incl. amount

loop while user interacts with order flow
  App -> ProductService: Modify order
  ProductService -> PE: POST order/
  ProductService <-- PE: ordertoken

  App <-- ProductService: ordertoken
  App -> PE: GET order/<ordertoken>
  App <-- PE: Info for SCA incl. amount
  App -> PE: Call /prepare
  App <-- PE: Surcharge etc.


  note over App, PE: Display screen for approval by user.\nSCA info (amount, merchant etc.) MUST be taken from PE.\nIn addition supplementary info from product service (delivery\nmethod; shopping cart) can be displayed from data exchanged\nwith product service.


end
Customer --> App: Approve payment
App -> PE: User signs; POST payment/
App <-- PE: OK
ProductService <- PE: Notified through Event Hub\nor polling

@enduml